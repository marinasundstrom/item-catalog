@using Catalog.Client
@inject IStringLocalizer<ItemPage> T
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IItemsClient ItemsClient
@inject NavigationManager NavigationManager


<MudText Typo="Typo.h5" Align="Align.Left" GutterBottom="true" Class="mt-8">@T["Comments"]</MudText>

<CommentBox ItemId="@ItemId" IsEditing="true" Title="What are you thinking about?" OnPosted="OnCommentPosted" />

@foreach (var comment in comments)
{
    <CommentBox ItemId="@ItemId" Comment="@comment" Text="@comment.Text" OnUpdated="OnCommentUpdated" OnDeleted="OnCommentDeleted" />
}

@if (isLoading)
{
    <div class="mt-8">
        <LoadingIndicator />
    </div>
}

@if (comments.Count < totalItems)
{
    if (!isLoading)
    {
        <div class="d-flex justify-center flex-grow-1 gap-4 mt-8">
            <MudButton Variant="Variant.Outlined" OnClick="async () => await LoadMoreAsync()">
                Load more (@(totalItems - comments.Count) remaining)
            </MudButton>
        </div>
    }
}

@code {
    List<CommentDto> comments = new List<CommentDto>();

    bool isLoading = false;
    bool loadingFailed = false;

    int skip = 0;
    int totalItems = 0;

    int resultSize = 5;

    [Parameter]
    public string ItemId { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
#if DEBUG
        resultSize = 2;
#endif

        await ReloadAsync();
    }

    async Task ReloadAsync()
    {
        comments.Clear();

        skip = 0;
        await LoadAsync();
    }

    async Task LoadAsync()
    {
        isLoading = true;
        loadingFailed = false;

        try
        {
#if DEBUG
            await Task.Delay(1000);
#endif

            var results = await ItemsClient.GetCommentsIncrAsync(ItemId, skip, resultSize, null, null);
            skip += results.Items.Count;
            totalItems = results.TotalCount;

            comments.AddRange(results.Items);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            Snackbar.Add("Failed to load comments.", Severity.Success);

            loadingFailed = true;
        }
        finally
        {
            isLoading = false;
        }

        StateHasChanged();
    }

    async Task LoadMoreAsync()
    {
        await LoadAsync();
    }

    private async Task OnCommentPosted(CommentDto comment)
    {
        comments.Insert(0, comment);

        skip++;
        totalItems++;
    }

    private async Task OnCommentUpdated(CommentDto comment)
    {
        var index = comments.IndexOf(comment);

        if (index > -1)
        {
            comments[index] = comment;
        }
    }

    private async Task OnCommentDeleted(CommentDto comment)
    {
        comments.Remove(comment);

        //await ReloadAsync();

        skip--;
        totalItems--;

        StateHasChanged();

        if (comments.Count < this.resultSize && comments.Count < this.totalItems)
        {
            await LoadAsync();
        } 
    }
}

