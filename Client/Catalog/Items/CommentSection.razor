@using Catalog.Client
@inject IStringLocalizer<ItemPage> T
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IItemsClient ItemsClient
@inject NavigationManager NavigationManager


<MudText Typo="Typo.h5" Align="Align.Left" GutterBottom="true" Class="mt-8">@T["Comments"]</MudText>

<MudButton OnClick="async () => await OpenDialog(null)" Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Class="mb-2 mt-2 mb-4">
    @T["NewComment"]
</MudButton>

@foreach (var comment in comments)
{
    <MudPaper Class="pa-4 mb-4">
        <div class="d-flex justify-space-between flex-grow-1 gap-4">
            <MudText Typo="Typo.h6">@comment.CreatedBy.GetDisplayName() said:</MudText>


            <div class="justify-end">
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="async () => await OpenDialog(comment)"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="async () => await DeleteComment(comment)"></MudIconButton>
            </div>
        </div>

        <MudText Typo="Typo.body1">@comment.Text</MudText>

        <div class="mt-4">
            <MudText Typo="Typo.body2">@comment.Created.ToString("g")</MudText>
            <MudText Typo="Typo.body2">@comment.LastModified?.ToString("g")</MudText>
        </div>
    </MudPaper>
}

@if (isLoading)
{
    <div class="mt-8">
        <LoadingIndicator />
    </div>
}

@if (comments.Count < totalItems)
{
    if (!isLoading)
    {
        <div class="d-flex justify-center flex-grow-1 gap-4 mt-8">
            <MudButton Variant="Variant.Outlined" OnClick="async () => await LoadMoreAsync()">
                Load more (@(totalItems - comments.Count) remain)
            </MudButton>
        </div>
    }
}

@code {
    List<CommentDto> comments = new List<CommentDto>();

    bool isLoading = false;
    bool loadingFailed = false;

    int page = 1;
    int totalItems = 0;

    int pageSize = 5;

    [Parameter]
    public string ItemId { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
#if DEBUG
        pageSize = 2;
#endif

        await ReloadAsync();
    }

    async Task ReloadAsync()
    {
        comments.Clear();

        page = 1;
        await LoadAsync(page);
    }

    async Task LoadAsync(int page)
    {
        isLoading = true;
        loadingFailed = false;

        try
        {
#if DEBUG
            await Task.Delay(1000);
#endif

            var results = await ItemsClient.GetCommentsAsync(ItemId, page - 1, pageSize, null, null);
            totalItems = results.TotalCount;

            comments.AddRange(results.Items);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            Snackbar.Add("Failed to load comments.", Severity.Success);

            loadingFailed = true;
        }
        finally
        {
            isLoading = false;
        }

        StateHasChanged();
    }

    async Task LoadMoreAsync()
    {
        page++;
        await LoadAsync(page);
    }

    private async Task OpenDialog(CommentDto? comment)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(CommentDialog.ItemId), ItemId);
        parameters.Add(nameof(CommentDialog.CommentId), comment?.Id);

        var dialogReference = DialogService.Show<CommentDialog>(comment is not null ? "Update comment" : "Write a comment", parameters);
        var result = await dialogReference.Result;
        var model = (CommentDialog.FormModel)result.Data;

        if (result.Cancelled)
            return;

        //comments.Insert(0, item);

        await ReloadAsync();
    }

    private async Task DeleteComment(CommentDto comment)
    {
        var result = await DialogService.ShowMessageBox($"Delete comment?", "Are you sure?", "Yes", "No");
        if (result.GetValueOrDefault())
        {
            await ItemsClient.DeleteCommentAsync(ItemId, comment.Id);

            comments.Remove(comment);
        }

        await ReloadAsync();
    }

}

