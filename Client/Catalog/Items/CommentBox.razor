@using Catalog.Client
@using System.ComponentModel.DataAnnotations
@inject IItemsClient ItemsClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="pa-4 mb-4" id="@(Comment is null ? null : $"comment-{Comment?.Id}")">
    @if (IsEditing)
    {
        <EditForm Model="this" OnValidSubmit="Submit">
            <DataAnnotationsValidator />

            <div>
                <div class="d-flex justify-start">
                    @if (Title is not null)
                    {
                        <MudText Typo="Typo.h6" Align="Align.Left">@Title</MudText>
                    }
                </div>

                <div class="d-flex justify-end">
                    @if (Comment is not null)
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.Cancel" OnClick="CancelEdit"></MudIconButton>
                    }
                </div>
            </div>

            <MudTextField Variant="Variant.Outlined" @bind-Value="Text" Lines="3" Placeholder="Write here" For="() => Text" />

            <div class="d-flex justify-end">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mb-2 mt-3">
                    @if (Comment is null)
                    {
                        <text>Post comment</text>
                    }
                    else
                    {
                        <text>Update comment</text>
                    }
                </MudButton>
            </div>
        </EditForm>
    }
    else
    {
        @if (Comment is not null)
        {
            <div class="d-flex justify-space-between flex-grow-1 gap-4">
                <MudText Typo="Typo.h6">@Comment.CreatedBy.GetDisplayName() said:</MudText>

                <div class="justify-end">
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="async () => IsEditing = !IsEditing"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="Delete"></MudIconButton>
                </div>
            </div>

            <MudText Typo="Typo.body1">@Comment.Text</MudText>
        }
    }
    @if (Comment is not null)
    {
        <div class="d-flex justify-space-between flex-grow-1 gap-4 mt-4">
            <MudText Typo="Typo.body2">Posted at @Comment.Created.ToString("g")</MudText>

            @if (Comment.LastModified is not null)
            {
                <MudText Typo="Typo.body2">Edited at @Comment.LastModified?.ToString("g")</MudText>
            }
        </div>
    }
</MudPaper>


@code
{
    [Parameter] public bool IsEditing { get; set; }

    [Parameter] public string? Title { get; set; }

    [Required]
    [StringLength(1024, ErrorMessage = "Text length can't be more than 1024.")]
    [Parameter] public string? Text { get; set; }

    [Parameter] public string? ItemId { get; set; }

    [Parameter] public CommentDto? Comment { get; set; }

    [Parameter] public EventCallback<CommentDto> OnPosted { get; set; }

    [Parameter] public EventCallback<CommentDto> OnUpdated { get; set; }

    [Parameter] public EventCallback<CommentDto> OnDeleted { get; set; }

    public async Task Submit()
    {
        try
        {
            if (Comment is null)
            {
                var comment = await ItemsClient.PostCommentAsync(ItemId, new PostCommentDto()
                {
                    Text = Text
                });

                Text = null;

                await OnPosted.InvokeAsync(comment);
            }
            else
            {
                await ItemsClient.UpdateCommentAsync(ItemId, Comment.Id, new UpdateCommentDto()
                {
                    Text = Text
                });

                Comment.Text = Text;
                Comment.LastModified = DateTime.Now;

                IsEditing = false;

                await OnUpdated.InvokeAsync(Comment);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exc)
        {
            Snackbar.Add("Comment was not updated.", Severity.Error);
        }
    }

    public async Task Delete()
    {
        var result = await DialogService.ShowMessageBox($"Delete comment?", "Are you sure?", "Yes", "No");
        if (result.GetValueOrDefault())
        {
            await ItemsClient.DeleteCommentAsync(ItemId, Comment.Id);

            await OnDeleted.InvokeAsync(Comment);
        }
    }

    void CancelEdit()
    {
        Text = null;
        IsEditing = false;
    }
}