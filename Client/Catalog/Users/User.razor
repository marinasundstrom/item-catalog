@page "/users/{userId}"
@attribute [Authorize(Roles = "Administrator,Manager")]
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IdentityService.Client.IUsersClient UsersClient

@if (user is null)
{
    <LoadingIndicator />
}
else 
{
    <PageTitle>@user.GetDisplayName() - Catalog</PageTitle>

    <MudText Typo="Typo.h3" GutterBottom="true">@user.GetDisplayName()</MudText>

    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Default" Class="me-2" OnClick="ChangeUserDetails">Edit details</MudButton>
    <MudButton Variant="Variant.Filled" OnClick="ChangePassword">Change password</MudButton>
}

@code {
    bool isLoading = false;
    IdentityService.Client.UserDto user;

    [Parameter] public string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await UsersClient.GetUserAsync(UserId);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task ChangeUserDetails()
    {
        NavigationManager.NavigateTo($"/Users/{user.Id}/Edit");
    }

    async Task ChangePassword()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(ChangePasswordDialog.UserId), UserId);

        var r = DialogService.Show<ChangePasswordDialog>("Change password", parameters);
    }
}

