@page "/items/{id}"
@using Catalog.Client
@inject ISnackbar Snackbar
@inject IItemsClient ItemsClient
@inject NavigationManager NavigationManager
@implements IDisposable

@if (item is not null)
{
    <PageTitle>@item.Name</PageTitle>

    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@item.Name</MudText>

    <MudPaper Class="px-8 py-8">
        <MudText Typo="Typo.body1">@item.Description</MudText>
    </MudPaper>
}

@code
{
    ItemDto? item;

    [Parameter]
    public string Id { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    async Task LoadAsync()
    {
        try
        {
            item = await ItemsClient.GetItemAsync(Id);
        }
        catch (ApiException<ProblemDetails> exc)
        {
            Snackbar.Add(exc.Result.Detail, Severity.Error);
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message, Severity.Error);
        }
    }

    async void OnLocationChanged(object sender, LocationChangedEventArgs ev)
    {
        await LoadAsync();

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}