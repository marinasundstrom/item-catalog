@page "/items/{id}"
@using Catalog.Client
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IItemsClient ItemsClient
@inject NavigationManager NavigationManager
@implements IDisposable

@if (item is not null)
{
    <PageTitle>@item.Name</PageTitle>

    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@item.Name</MudText>

    <MudPaper Class="px-8 py-8">
        <MudText Typo="Typo.body1">@item.Description</MudText>
    </MudPaper>

    <MudPaper Class="mt-4 px-4 py-4">
        <MudText Typo="Typo.h6" Align="Align.Left" GutterBottom="true">Comments</MudText>

        <MudButton @onclick="OpenDialog" Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Default" Class="mb-2 mt-2 mb-2">
            New comment
        </MudButton>

        <MudTable T="CommentDto" Elevation="0" Dense="true" @ref="table" SortLabel="Sort By" ServerData="@(new Func<TableState, Task<TableData<CommentDto>>>(ServerReload))" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Text</MudTh>
                <MudTh><MudTableSortLabel T="CommentDto" SortLabel="Created">Created</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudIcon Icon="@Icons.Material.Filled.InsertDriveFile" />
                </MudTd>
                <MudTd DataLabel="Name">@context.Text</MudTd>
                <MudTd DataLabel="Created">@context.Created.ToString("g")</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>

}


@code {
    MudTable<CommentDto> table;
    ItemDto? item;

    [Parameter]
    public string Id { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    async Task LoadAsync()
    {
        try
        {
            item = await ItemsClient.GetItemAsync(Id);
        }
        catch (ApiException<ProblemDetails> exc)
        {
            Snackbar.Add(exc.Result.Detail, Severity.Error);
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message, Severity.Error);
        }
    }

    async void OnLocationChanged(object sender, LocationChangedEventArgs ev)
    {
        await LoadAsync();

        StateHasChanged();
    }

    private async Task<TableData<CommentDto>> ServerReload(TableState state)
    {
        var results = await ItemsClient.GetCommentsAsync(Id, state.Page, state.PageSize, state.SortLabel,
            state.SortDirection == MudBlazor.SortDirection.Ascending ? Catalog.Client.SortDirection.Asc : Catalog.Client.SortDirection.Desc);

        return new TableData<CommentDto>() { TotalItems = results.TotalCount, Items = results.Items };
    }

    private async Task OpenDialog()
    {
        var dialogReference = DialogService.Show<CreateCommentDialog>("Write a comment");
        var result = await dialogReference.Result;
        var model = (CreateCommentDialog.FormModel)result.Data;

        if (result.Cancelled)
            return;

        try
        {
            await ItemsClient.PostCommentAsync(Id, new PostCommentDto()
            {
                Text = model.Text
            });

            await table.ReloadServerData();
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}