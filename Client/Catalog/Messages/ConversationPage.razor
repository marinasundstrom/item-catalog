@page "/conversation"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Humanizer
@implements IAsyncDisposable
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject Catalog.Shared.Authorization.ICurrentUserService CurrentUserService

<style>
    body {
        background-color: #fff !important;
    }

    .bubble {
        display: inline-block;
        padding: 8px 16px;
        word-break: break-word;
        border-radius: 4px;
        margin-bottom: 4px;
    }

    .bubble-group-right .bubble-group-footer {
        float: right;
    }

    .bubble-right {
        color: #fff;
        background-color: #1976d2;

        border-top-left-radius: 20px;
        border-bottom-left-radius: 20px;

        float: right;
    }

    .bubble-group .bubble-group-content > div:first-of-type > .bubble-right {
        border-top-right-radius: 20px;
    }

    .bubble-group .bubble-group-content > div:last-of-type > .bubble-right {
        border-bottom-right-radius: 20px;
    }

    .bubble-left {
        background-color: #f5f5f5;

        border-top-right-radius: 20px;
        border-bottom-right-radius: 20px;
    }

    .bubble-group .bubble-group-content > div:first-of-type > .bubble-left {
        border-top-left-radius: 20px;
    }

    .bubble-group .bubble-group-content > div:last-of-type > .bubble-left {
        border-bottom-left-radius: 20px;
    }

    .bubble-group {
        margin-bottom: 10px;
    }

    .bottom {
        width: 100%;
        bottom: 0;
        left: 0;
        right: 0;
        position: fixed;
        padding: 10px; 
        z-index: 99999; 
        background-color: white; 
        border-top: solid #ececec 1px;
    }
</style>

<PageTitle>Chat - Catalog</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="12" md="8">

        @foreach (var s in sections)
        {
            <MudChatSection @key="@s.Id">
                <Header>
                    <MudText Typo="Typo.h6" Class="mt-6 mb-4" Align="Align.Center">@s.Header</MudText>
                </Header>

                <ChildContent>

                    @foreach (var group in s.Groups)
                    {
                        <MudChatMessage T="Message" Messages="group.Messages" @key="@group.Id" Placement="@(group.SenderId == userId ? ChatMessagePlacement.Right : ChatMessagePlacement.Left)">
                            <Avatar>
                                @{
                                    var nameParts = group.Sender.Split(" ");
                                }
                                <MudAvatar Style="margin-top: -2px" Size="Size.Medium">@nameParts[0][0]@nameParts[1][0]</MudAvatar>
                            </Avatar>

                            <ContentTemplate Context="message">
                                <MudChatBubble @key="message.Id">
                                    <ChildContent>
                                        <p>@message.Content</p>
                                    </ChildContent>

                                    <Actions>
                                        <MudMenu AnchorOrigin="Origin.BottomLeft">
                                            <ActivatorContent>
                                                <MudIconButton Style="margin-top: -5px; padding: 10px;" Icon="@Icons.Filled.MoreVert" Variant="Variant.Text" Color="Color.Secondary" />
                                            </ActivatorContent>
                                            <ChildContent>
                                                <MudMenuItem>Delete</MudMenuItem>
                                                <MudMenuItem>Report</MudMenuItem>
                                            </ChildContent>
                                        </MudMenu>
                                    </Actions>
                                </MudChatBubble>
                            </ContentTemplate>

                            @* <Content>
                                @foreach (var message in group.Messages)
                                {
                                    <MudChatBubble @key="@message.Id">
                                        <p>@message.Content</p>
                                    </MudChatBubble>
                                }
                            </Content> *@

                            <Footer>
                                <MudText Typo="Typo.caption" Style="color: gray;">@group.Footer</MudText>
                            </Footer>
                        </MudChatMessage>
                    }
                </ChildContent>
            </MudChatSection>
        }

        @* <div>
            <MudText Typo="Typo.subtitle2" Class="mt-6 mb-4" Align="Align.Center">Conversation ended 11:37</MudText>
        </div> *@
    </MudItem>

    <MudItem xs="12" sm="12" md="4">

    </MudItem>
</MudGrid>

<div class="bottom">
            <MudGrid>
            <MudItem xs="10" sm="10" md="11">
                <MudTextField @bind-Value="text" Variant="Variant.Filled" Lines="1"></MudTextField>
            </MudItem>

             <MudItem xs="2" sm="2" md="1">
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Filled.Send" Class="mt-2" Style="border-radius: 50%; padding: 15px;" OnClick="Post" />
            </MudItem>
        </MudGrid>
</div>

@code {
    HubConnection hubConnection;

    string userId;

    protected override async Task OnInitializedAsync()
    {
        userId = await CurrentUserService.GetUserId();
try
            {
                hubConnection = new HubConnectionBuilder().WithUrl($"{NavigationManager.BaseUri}api/hubs/messages", options =>
                {
                    options.AccessTokenProvider = async () =>
                    {
                        var results = await AccessTokenProvider.RequestAccessToken(new AccessTokenRequestOptions()
                        {Scopes = new[]{"myapi"}});
                        if (results.TryGetToken(out var accessToken))
                        {
                            return accessToken.Value;
                        }

                        return null !;
                    };
                }).WithAutomaticReconnect().Build();
                
                hubConnection.On<MessageDto>("MessageReceived", OnMessageReceived);

                hubConnection.Closed += (error) =>
                {
                    if (error is not null)
                    {
                        Snackbar.Add($"{error.Message}", Severity.Error);
                    }

                    Snackbar.Add("Connection closed");
                    return Task.CompletedTask;
                };
                hubConnection.Reconnected += (error) =>
                {
                    Snackbar.Add("Reconnected");
                    return Task.CompletedTask;
                };
                hubConnection.Reconnecting += (error) =>
                {
                    Snackbar.Add("Reconnecting");
                    return Task.CompletedTask;
                };
                await hubConnection.StartAsync();
                Snackbar.Add("Connected");
            }
            catch (Exception exc)
            {
                Snackbar.Add(exc.Message.ToString(), Severity.Error);
            }
    }

    void OnMessageReceived(MessageDto dto) 
    {
        var lastSection = sections.LastOrDefault();

        if(lastSection is null) 
        {
            lastSection = new Section() 
            {
                Header = "Today"
            };
            sections.Add(lastSection);
        }

        var lastGroup = lastSection.Groups.LastOrDefault();

        if(lastGroup is null) 
        {
            lastGroup = new MessageGroup() 
            {
                Sender = dto.SentBy,
                SenderId = dto.SentById
            };
            lastSection.Groups.Add(lastGroup);
        }

        if(lastGroup.SenderId != dto.SentById) {
            lastGroup = new MessageGroup() {
                Sender = dto.SentBy,
                SenderId = dto.SentById
            };

            lastSection.Groups.Add(lastGroup);

            lastGroup.Footer = $"Received {DateTime.Now.Humanize()}";
        }
        else 
        {
            lastGroup.Footer = $"Read {DateTime.Now.Humanize()}";
        }

        lastGroup.Messages.Add(new Message() {
            Content = dto.Content!
        });

        text = string.Empty;

        StateHasChanged();
    }

    class MessageDto 
    {
        public string SentBy { get; set; } = null!;

        public string SentById { get; set; } = null!;

        public string? Content { get; set; }

        public DateTime DateSent { get; set; }
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    private void Init() 
    {
        var yesterdaySection = new Section()
        {
            Header = "Yesterday",
        };

        var group = new MessageGroup()
        {
            Sender = "BS",
            Footer = "Received 11:26"
        };

        group.Messages.Add(new Message()
        {
            Content = "Hi Alice, How r u today?"
        });

        group.Messages.Add(new Message()
        {
            Content = "Did you train yesterday?"
        });

        group.Messages.Add(new Message()
        {
            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat lacus laoreet non curabitur gravida."
        });

        yesterdaySection.Groups.Add(group);

        sections.Add(yesterdaySection);

        var todaySection = new Section()
        {
            Header = "Today",
        };

        group = new MessageGroup()
        {
            Sender = "AS",
            Footer = "Read 11:32"
        };

        group.Messages.Add(new Message()
        {
            Content = "Great! What's about you?"
        });

        group.Messages.Add(new Message()
        {
            Content = "Of course I did. Speaking of which check this out"
        });

        todaySection.Groups.Add(group);

        group = new MessageGroup()
        {
            Sender = "BS",
            Footer = "Received 11:37"
        };

        group.Messages.Add(new Message()
        {
            Content = "I'm well"
        });

        group.Messages.Add(new Message()
        {
            Content = "See u later. ❤️"
        });

        todaySection.Groups.Add(group);

        sections.Add(todaySection);
    }

    List<Section> sections = new List<Section>();

    async Task Post() 
    {
        if(string.IsNullOrEmpty(text))
        {
            return;
        }

        await hubConnection.SendAsync("SendMessage", text);
    }

    void Add1() => Add("BS");

    void Add2() => Add("AS");

    string text;

    void Add(string name) 
    {
        if(string.IsNullOrEmpty(text))
        {
            return;
        }

        var lastSection = sections.Last();
        var lastGroup = lastSection.Groups.Last();

        if(lastGroup.Sender != name) {
            lastGroup = new MessageGroup() {
                Sender = name,
                SenderId = ""
            };

            lastSection.Groups.Add(lastGroup);
        }

        lastGroup.Messages.Add(new Message() {
            Content = text
        });

        text = string.Empty;
    }

    public class Section
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();

        public string? Header { get; set; }

        public List<MessageGroup> Groups { get; set; } = new List<MessageGroup>();
    }

    public class MessageGroup
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();

        public string Sender { get; set; } = null!;
        public string SenderId { get; set; } = null!;

        public List<Message> Messages { get; set; } = new List<Message>();
        public string Footer { get; set; } = null!;
    }

    public class Message
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();

        public string Content { get; set; } = null!;
    }
}