@page "/conversation"
@attribute [Authorize]
@layout ConversationLayout
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Catalog.Client
@using Humanizer
@implements IAsyncDisposable
@inject IMessagesClient MessagesClient
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject Catalog.Shared.Authorization.ICurrentUserService CurrentUserService
@inject IJSRuntime JSRuntime

<PageTitle>Chat - Catalog</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="12" md="8">

            <MudChatSection>
                <Header>
                    <MudText Typo="Typo.h6" Class="mt-6 mb-4" Align="Align.Center">Today</MudText>
                </Header>

                <ChildContent>

                    @foreach (var group in groups)
                    {
                        <MudChatMessage T="Message" Messages="group.Messages" @key="@group.Id" Placement="@(group.SenderId == userId ? ChatMessagePlacement.Right : ChatMessagePlacement.Left)" ShowAvatar="@(group.SenderId != userId)">
                            <Avatar>
                                @{
                                    var nameParts = group.Sender.Split(" ");
                                }
                                <MudAvatar Style="margin-top: -2px" Size="Size.Medium">@nameParts[0][0]@nameParts[1][0]</MudAvatar>
                            </Avatar>

                            @* <Header>
                                <MudText Typo="Typo.caption" Style="color: gray;">@group.Header</MudText>
                            </Header> *@

                            <ContentTemplate Context="message">
                                <MudChatBubble @key="message.Id">
                                    <ChildContent>
                                        <p>@message.Content</p>
                                    </ChildContent>

                                    <Actions>
                                        <MudMenu AnchorOrigin="Origin.BottomLeft">
                                            <ActivatorContent>
                                                <MudIconButton Style="margin-top: -5px; padding: 10px;" Icon="@Icons.Filled.MoreVert" Variant="Variant.Text" Color="Color.Secondary" />
                                            </ActivatorContent>
                                            <ChildContent>
                                                <MudMenuItem>Delete</MudMenuItem>
                                                <MudMenuItem>Report</MudMenuItem>
                                            </ChildContent>
                                        </MudMenu>
                                    </Actions>
                                </MudChatBubble>
                            </ContentTemplate>

                            @* <Content>
                                @foreach (var message in group.Messages)
                                {
                                    <MudChatBubble @key="@message.Id">
                                        <p>@message.Content</p>
                                    </MudChatBubble>
                                }
                            </Content> *@

                            <Footer>
                                <MudText Typo="Typo.caption" Style="color: gray;">@group.Footer</MudText>
                            </Footer>
                        </MudChatMessage>
                    }
                </ChildContent>
            </MudChatSection>

            <div style="height: 50px"></div>

        @* <div>
            <MudText Typo="Typo.subtitle2" Class="mt-6 mb-4" Align="Align.Center">Conversation ended 11:37</MudText>
        </div> *@
    </MudItem>

    <MudItem xs="12" sm="12" md="4">

    </MudItem>
</MudGrid>

<div class="bottom d-flex flex-grow-1 gap-4">
    <div class="flex-auto d-flex" style="width: 100%">
        <MudTextField @bind-Value="text" Variant="Variant.Filled" Class="rounded-lg" Lines="1"></MudTextField>
    </div>
    <div class="flex-auto d-flex" style="width: 54px">
        <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Filled.Send" Class="mt-2" Style="border-radius: 50%; padding: 15px;" OnClick="Post" />
    </div>
</div>

@code {
    HubConnection hubConnection;

    string userId;

    List<MessageGroup> groups = new List<MessageGroup>();


    protected override async Task OnInitializedAsync()
    {
        userId = await CurrentUserService.GetUserId();
        try
        {
            hubConnection = new HubConnectionBuilder().WithUrl($"{NavigationManager.BaseUri}api/hubs/messages", options =>
            {
                options.AccessTokenProvider = async () =>
                {
                    var results = await AccessTokenProvider.RequestAccessToken(new AccessTokenRequestOptions()
                    {Scopes = new[]{"myapi"}});
                    if (results.TryGetToken(out var accessToken))
                    {
                        return accessToken.Value;
                    }

                    return null !;
                };
            }).WithAutomaticReconnect().Build();

            hubConnection.On<UserDto2>("UserJoined", OnUserJoined);
            hubConnection.On<MessageDto>("MessageReceived", OnMessageReceived);
            hubConnection.On<UserDto2>("UserLeft", OnUserLeft);

            hubConnection.Closed += (error) =>
            {
                if (error is not null)
                {
                    Snackbar.Add($"{error.Message}", Severity.Error);
                }

                Snackbar.Add("Connection closed");
                return Task.CompletedTask;
            };
            hubConnection.Reconnected += (error) =>
            {
                Snackbar.Add("Reconnected");
                return Task.CompletedTask;
            };
            hubConnection.Reconnecting += (error) =>
            {
                Snackbar.Add("Reconnecting");
                return Task.CompletedTask;
            };
            await hubConnection.StartAsync();
            Snackbar.Add("Connected");
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }

        await LoadItems();
    }

    void OnUserJoined(UserDto2 dto)
    {
        Snackbar.Add($"{dto.User} has joined the conversation.");

        StateHasChanged();
    }

    void OnUserLeft(UserDto2 dto)
    {
        Snackbar.Add($"{dto.User} has left the conversation.");

        StateHasChanged();
    }

    async Task OnMessageReceived(MessageDto dto)
    {
        var lastGroup = groups.LastOrDefault();

        if(lastGroup is null)
        {
            lastGroup = new MessageGroup()
            {
                Sender = dto.SentBy,
                SenderId = dto.SentById
            };
            groups.Add(lastGroup);
        }

        if(lastGroup.SenderId != dto.SentById) {
            lastGroup = new MessageGroup() {
                Sender = dto.SentBy,
                SenderId = dto.SentById
            };

            groups.Add(lastGroup);

            lastGroup.Header = $"{DateTime.Now.TimeOfDay}";
            lastGroup.Footer = $"Received {DateTime.Now.Humanize()}";
        }
        else
        {
            lastGroup.Header = $"{DateTime.Now.TimeOfDay}";
            lastGroup.Footer = $"Read {DateTime.Now.Humanize()}";
        }

        lastGroup.Messages.Add(new Message() {
            Content = dto.Content!
        });

        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("helpers.scrollToBottom");
    }

    async Task LoadItems()
    {
        await LoadItems(0);
    }


    async Task LoadItems(int skip)
    {
        var results = await MessagesClient.GetMessagesAsync(skip, 10, null!, null);

        foreach(var result in results.Items)
        {
            var group = new MessageGroup()
            {
                SenderId = result.CreatedBy.Id,
                Sender = result.CreatedBy.FirstName + " " + result.CreatedBy.LastName
            };

            group.Messages.Add(new Message()
            {
                Id = result.Id,
                Content = result.Text
            });

            groups.Insert(0, group);
        }

        StateHasChanged();
    }

    class MessageDto
    {
        public string SentBy { get; set; } = null!;

        public string SentById { get; set; } = null!;

        public string? Content { get; set; }

        public DateTime DateSent { get; set; }
    }

    public class UserDto2
    {
        public string User { get; set; } = null!;
        public string? UserId { get; set; }
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    private void Init()
    {
        var yesterdaySection = new Section()
        {
            Header = "Yesterday",
        };

        var group = new MessageGroup()
        {
            Sender = "BS",
            Footer = "Received 11:26"
        };

        group.Messages.Add(new Message()
        {
            Content = "Hi Alice, How r u today?"
        });

        group.Messages.Add(new Message()
        {
            Content = "Did you train yesterday?"
        });

        group.Messages.Add(new Message()
        {
            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Volutpat lacus laoreet non curabitur gravida."
        });

        yesterdaySection.Groups.Add(group);

        sections.Add(yesterdaySection);

        var todaySection = new Section()
        {
            Header = "Today",
        };

        group = new MessageGroup()
        {
            Sender = "AS",
            Footer = "Read 11:32"
        };

        group.Messages.Add(new Message()
        {
            Content = "Great! What's about you?"
        });

        group.Messages.Add(new Message()
        {
            Content = "Of course I did. Speaking of which check this out"
        });

        todaySection.Groups.Add(group);

        group = new MessageGroup()
        {
            Sender = "BS",
            Footer = "Received 11:37"
        };

        group.Messages.Add(new Message()
        {
            Content = "I'm well"
        });

        group.Messages.Add(new Message()
        {
            Content = "See u later. ❤️"
        });

        todaySection.Groups.Add(group);

        sections.Add(todaySection);
    }

    List<Section> sections = new List<Section>();

    async Task Post()
    {
        if(string.IsNullOrEmpty(text))
        {
            return;
        }

        await hubConnection.SendAsync("SendMessage", text);

        text = string.Empty;
    }

    string text;

    public class Section
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();

        public string? Header { get; set; }

        public List<MessageGroup> Groups { get; set; } = new List<MessageGroup>();
    }

    public class MessageGroup
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();

        public string Sender { get; set; } = null!;
        public string SenderId { get; set; } = null!;

        public List<Message> Messages { get; set; } = new List<Message>();

        public string Header { get; set; } = null!;

        public string Footer { get; set; } = null!;
    }

    public class Message
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();

        public string Content { get; set; } = null!;
    }
}