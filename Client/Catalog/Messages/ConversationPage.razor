@page "/conversation"
@attribute [Authorize]
@layout ConversationLayout
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Diagnostics
@using Catalog.Client
@using Humanizer
@implements IAsyncDisposable
@inject IMessagesClient MessagesClient
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject Catalog.Shared.Authorization.ICurrentUserService CurrentUserService
@inject IJSRuntime JSRuntime

<PageTitle>Chat - Catalog</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="12" md="8">

            <MudChatSection>
                <Header>
                    <MudText Typo="Typo.h6" Class="mt-6 mb-4" Align="Align.Center">Conversation</MudText>
                </Header>

                <ChildContent>
                    @foreach (var message in messages) 
                    {
                        bool isAuthorCurrentUser = userId == message?.SentBy.Id;
                        bool isAuthorizedToEdit = isAuthorCurrentUser;
                        bool isAuthorizedToDelete = isAuthorCurrentUser || isCurrentUserAdmin;

                                int messageIndex = messages.IndexOf(message);
                                Message? previousMessage = null;
                                Message? nextMessage = null;
                                if(messageIndex > 0) 
                                {
                                    previousMessage = messages[messageIndex - 1];
                                }
                                if(messageIndex < messages.Count - 1) 
                                {
                                    nextMessage = messages[messageIndex + 1];
                                }

                                bool isFirst = previousMessage == null || !FromSameSender(message, previousMessage);
                                bool isLast = nextMessage == null || !IsSameTime(message, nextMessage) || !FromSameSender(message, nextMessage);
                                bool isSameSenderAsPrevious = previousMessage == null || FromSameSender(message, previousMessage);
                                
                                bool sameMinutesAsLast = previousMessage == null || IsSameTime(message, previousMessage);

                            <MudMessage @key="@message.Id" Class="@($"{(isFirst || !sameMinutesAsLast ? "first" : String.Empty)} {(isLast ? "last" : string.Empty)}")" IsFooterVisible="@isLast" IsSideContentVisible="@(!IsFromCurrentUser(message))" Position="@(IsFromCurrentUser(message) ? MessagePosition.Right : MessagePosition.Left)">                           
                                
                                <Footer>
                                    @if (isLast)
                                    {
                                        if (IsFromCurrentUser(message))
                                        {
                                            if (message.Receipts.Any(x => x.User.Id != userId))
                                            {
                                                <MudTooltip Text="@(string.Join("\n", message.Receipts.Select(x => x.User.GetDisplayName())))">
                                                    @foreach (var receipt in message.Receipts)
                                                    {
                                                        <MudAvatar Size="Size.Small" Style="height: 1.2em; width: 1.2em; margin-top: 2px; margin-left: 2px; margin-right: 2px">@receipt.User.GetDisplayName().GetInitials()</MudAvatar>
                                                    }
                                                </MudTooltip>
                                            }
                                            else
                                            {
                                                <MudIcon Icon="@Icons.Filled.CheckCircle" Size="Size.Small" Style="height: 0.8em; margin-top: 2px;" />
                                            }
                                        }
     
                                        var Sent = message.Sent.GetValueOrDefault();
                                        var timeSince = DateTime.Now - Sent;
                                     
                                        if (timeSince.TotalMinutes < 30)
                                        {
                                            <TimerView Interval="TimeSpan.FromSeconds(1)">
                                                <small class="time">
                                                    @if(timeSince.TotalMinutes >= 1)
                                                    {  
                                                        <text>@timeSince.Humanize(minUnit: TimeUnit.Minute) ago</text>
                                                    }
                                                    else
                                                    {
                                                        <text>Now</text>
                                                    }
                                                </small>
                                            </TimerView>
                                        }
                                        else
                                        {
                                            <small>@Sent.ToString("HH:mm")</small>
                                        }
                                    }
                                </Footer>

                                <SideContent>
                                    @if (!IsFromCurrentUser(message))
                                    {
                                        if(isFirst || !sameMinutesAsLast) 
                                        {
                                            <div class="message-avatar">
                                                <MudAvatar Size="Size.Small">@message.SentBy.GetDisplayName().GetInitials()</MudAvatar>
                                            </div>
                                        }
                                    }
                                </SideContent>

                                <Content>
                                    <MudBubble Class="@(message.Deleted is not null ? "deleted" : string.Empty)">
                                        @if (message.Deleted is not null)
                                        {
                                            <p>Message was deleted.</p>
                                        }
                                        else
                                        {
                                            @((MarkupString)message.Text.Replace("\n", "<br />"))

                                        }
                                    </MudBubble>

                                </Content>

                                <Actions>
                                    @if (message.Deleted is null)
                                    {
                                        <MudMenu AnchorOrigin="Origin.BottomLeft">
                                            <ActivatorContent>
                                                <MudIconButton Style="margin-top: -5px; padding: 10px;" Icon="@Icons.Filled.MoreVert"
                                                    Variant="Variant.Text" Color="Color.Secondary" />
                                            </ActivatorContent>
                                            <ChildContent>
                                                @if (isAuthorizedToEdit)
                                                    {
                                                    <MudMenuItem>
                                                        <div class="d-flex flex-row flex-grow-1 gap-2">
                                                            <MudIcon Icon="@Icons.Filled.Edit" Size="Size.Medium" />
                                                            Edit
                                                        </div>
                                                    </MudMenuItem>
                                                    }
                                                @if (isAuthorizedToDelete)
                                                    {
                                                    <MudMenuItem OnClick="async () => await DeleteMessage(message)">
                                                        <div class="d-flex flex-row flex-grow-1 gap-2">
                                                            <MudIcon Icon="@Icons.Filled.Delete" Size="Size.Medium" />
                                                            Delete
                                                        </div>
                                                    </MudMenuItem>
                                                    }
                                                <MudMenuItem>
                                                    <div class="d-flex flex-row flex-grow-1 gap-2">
                                                        <MudIcon Icon="@Icons.Filled.Report" Size="Size.Medium" />
                                                        Report
                                                    </div>
                                                </MudMenuItem>
                                            </ChildContent>
                                        </MudMenu>
                                    }
                                </Actions>
                            </MudMessage>
                        }
                </ChildContent>
            </MudChatSection>

            <div style="height: 90px"></div>

        @* <div>
            <MudText Typo="Typo.subtitle2" Class="mt-6 mb-4" Align="Align.Center">Conversation ended 11:37</MudText>
        </div> *@
    </MudItem>

    <MudItem xs="12" sm="12" md="4">

    </MudItem>
</MudGrid>

<div class="bottom d-flex flex-grow-1 gap-4">
    <div class="flex-auto d-flex" style="width: 100%">
        <MudTextField @bind-Value="text" Variant="Variant.Filled" Class="rounded-lg" Lines="2"></MudTextField>
    </div>
    <div class="flex-auto d-flex" style="width: 81px">
        <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Filled.Send" Class="mt-2" Style="border-radius: 50%; padding: 15px; height: 70px; width: 70px;" OnClick="Post" />
    </div>
</div>

@code {
    HubConnection hubConnection;

    string userId;

    List<Message> messages = new List<Message>();

    bool IsFromCurrentUser(Message message)
    {
        return message.SentBy.Id == userId;
    }

    bool FromSameSender(Message m1, Message m2)
    {
        return m1.SentBy.Id == m2.SentBy.Id;
    }

    bool IsSameTime(Message m1, Message m2)
    {
        return (m1.Sent.GetValueOrDefault().Hour == m2.Sent.GetValueOrDefault().Hour
                && m1.Sent.GetValueOrDefault().Minute == m2.Sent.GetValueOrDefault().Minute);
    }

    async Task DeleteMessage(Message message)
    {
        await hubConnection.SendAsync("DeleteMessage", message.Id);
        //await MessagesClient.DeleteMessageAsync(message.Id);
    }

    bool isCurrentUserAdmin;

    protected override async Task OnInitializedAsync()
    {
        userId = await CurrentUserService.GetUserId();
        isCurrentUserAdmin = await CurrentUserService.IsUserInRole(Roles.Administrator);

        try
        {
            hubConnection = new HubConnectionBuilder().WithUrl($"{NavigationManager.BaseUri}api/hubs/messages", options =>
            {
                options.AccessTokenProvider = async () =>
                {
                    var results = await AccessTokenProvider.RequestAccessToken(new AccessTokenRequestOptions()
                    {Scopes = new[]{"myapi"}});
                    if (results.TryGetToken(out var accessToken))
                    {
                        return accessToken.Value;
                    }

                    return null !;
                };
            }).WithAutomaticReconnect().Build();

            hubConnection.On<UserDto2>("UserJoined", OnUserJoined);
            hubConnection.On<MessageDto>("MessageReceived", OnMessageReceived);
            hubConnection.On<MessageEditedDto>("MessageEdited", OnMessageEdited);
            hubConnection.On<ReceiptDto>("MessageRead", OnMessageRead);
            hubConnection.On<MessageDeletedDto>("MessageDeleted", OnMessageDeleted);
            hubConnection.On<UserDto2>("UserLeft", OnUserLeft);

            hubConnection.Closed += (error) =>
            {
                if (error is not null)
                {
                    Snackbar.Add($"{error.Message}", Severity.Error);
                }

                Snackbar.Add("Connection closed");
                return Task.CompletedTask;
            };
            hubConnection.Reconnected += (error) =>
            {
                Snackbar.Add("Reconnected");
                return Task.CompletedTask;
            };
            hubConnection.Reconnecting += (error) =>
            {
                Snackbar.Add("Reconnecting");
                return Task.CompletedTask;
            };
            await hubConnection.StartAsync();
            Snackbar.Add("Connected");
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }

        await LoadItems(30);

        await JSRuntime.InvokeVoidAsync("helpers.attachScrollEventHandler", DotNetObjectReference.Create(this));

        await JSRuntime.InvokeVoidAsync("helpers.scrollToBottom");
    }

    void OnUserJoined(UserDto2 dto)
    {
        Snackbar.Add($"{dto.User} has joined the conversation.");

        StateHasChanged();
    }

    void OnUserLeft(UserDto2 dto)
    {
        Snackbar.Add($"{dto.User} has left the conversation.");

        StateHasChanged();
    }

    async Task OnMessageReceived(MessageDto dto)
    {
        messages.Add(new Message() {
            Id = dto.Id!,
            SentBy = dto.SentBy,
            Text = dto.Text!,
            Receipts = dto.Receipts.ToList(),
            Sent = dto.Sent.DateTime
        });

        this.skip++;

        if(dto.SentBy.Id != userId)
        {
            Console.WriteLine("Send message read");

            await hubConnection.SendAsync("MessageRead", dto.Id);
        }

        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("helpers.scrollToBottom");
    }

    async Task OnMessageEdited(MessageEditedDto dto)
    {
        var message = messages.FirstOrDefault(x => x.Id == dto.Id);

        if(message is not null)
        {
            message.Text = dto.Text;

            StateHasChanged();
        }
    }

    async Task OnMessageRead(ReceiptDto dto)
    {
        Console.WriteLine("Receive message read");

        var message = messages.FirstOrDefault(x => x.Id == dto.MessageId);

        if (message is not null)
        {
            Console.WriteLine("Add message read");

            message.Receipts.Add(dto);

            StateHasChanged();
        }
    }

    void OnMessageDeleted(MessageDeletedDto dto)
    {
        var message = messages.FirstOrDefault(x => x.Id == dto.Id);

        if(message is not null)
        {
            message.Text = String.Empty;
            message.Deleted = DateTime.Now;

            //messages.Remove(message);

            //this.skip--;

            StateHasChanged();
        }
    }

    public record Point(double X, double Y);

    double lastY = 9999;
    double threshold = 900;

    [JSInvokable("OnScroll")]
    public async Task OnScroll(Point args)
    {
        if(Math.Round(args.Y) % 10 != 0)
        {
            return;
        }

        if(args.Y < lastY)
        {
            Debug.WriteLine(args);

            if(args.Y <= threshold)
            {
                await LoadItemsIncr(30);
            }
        }

        lastY = args.Y;
    }

    int skip = 0;
    int total = 0;

    async Task LoadItems(int take = 10)
    {
        messages.Clear();

        this.skip = 0;
        await LoadItemsCore(take);
    }

    async Task LoadItemsCore(int take = 10)
    {
        var results = await MessagesClient.GetMessagesAsync(this.skip, take, null!, null);
        total = results.TotalCount;
        this.skip += results.Items.Count;

        foreach(var dto in results.Items)
        {
            var message = new Message() {
                Id = dto.Id,
                SentBy = dto.SentBy,
                Text = dto.Text!,
                Receipts = dto.Receipts.ToList(),
                Sent = dto.Sent.DateTime,
                Deleted = dto.Deleted?.DateTime
            };

            messages.Insert(0, message);

            if (dto.SentBy.Id != userId && !message.Receipts.Any(x => x.User.Id == userId))
            {
                await hubConnection.SendAsync("MessageRead", dto.Id);
            }
        }

        StateHasChanged();
    }

    bool loading;

    async Task LoadItemsIncr(int take = 10)
    {
        if(loading)
        {
            return;
        }

        try
        {
            loading = true;

            if(messages.Count == total)
            {
                return;
            }

            Debug.WriteLine(total);
            Debug.WriteLine(skip);

            await LoadItemsCore(take);
        }
        finally
        {
            loading = false;
        }
    }

    public class UserDto2
    {
        public string User { get; set; } = null!;
        public string? UserId { get; set; }
    }

    public class MessageDeletedDto
    {
        public string? Id { get; set; }
    }

    public class MessageEditedDto
    {
        public string? Id { get; set; }

        public string Text { get; set; }
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    async Task Post()
    {
        if(string.IsNullOrEmpty(text))
        {
            return;
        }

        await hubConnection.SendAsync("SendMessage", text);

        text = string.Empty;
    }

    string text;

    public class Section
    {
        public string Id { get; set; } = null!;

        public string? Header { get; set; }

        public List<Message> Messages { get; set; } = new List<Message>();
    }


    public class Message
    {
        public string Id { get; set; } = null!;

        public UserDto SentBy { get; set; } = null!;

        public string Text { get; set; } = null!;

        public List<ReceiptDto> Receipts { get; set; } = new List<ReceiptDto>();

        public DateTime? Sent { get; set; }

        public DateTime? Deleted { get; set; }

        public DateTime? Edited { get; set; }
    }
}