@page "/conversation"
@attribute [Authorize]
@layout ConversationLayout
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Catalog.Client
@using Humanizer
@implements IAsyncDisposable
@inject IMessagesClient MessagesClient
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject Catalog.Shared.Authorization.ICurrentUserService CurrentUserService
@inject IJSRuntime JSRuntime

<PageTitle>Chat - Catalog</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="12" md="8">

            <MudChatSection>
                <Header>
                    <MudText Typo="Typo.h6" Class="mt-6 mb-4" Align="Align.Center">Today</MudText>
                </Header>

                <ChildContent>
                    <Virtualize Context="message" Items="@messages" ItemSize="25">
                        <ItemContent>
                            @{
                                int messageIndex = messages.IndexOf(message);
                                bool isFirst = messageIndex == 0 || message.SenderId != messages[messageIndex - 1].SenderId;
                                bool isLast = messageIndex == messages.Count - 1 || message.SenderId != messages[messageIndex + 1].SenderId;
                            }
                            <MudMessage @key="@message.Id" Position="@(IsFromCurrentUser(message) ? MessagePosition.Right : MessagePosition.Left)">
                                
                                    <Header>
                                        @if (messageIndex == 0 || message.SenderId != messages[messageIndex - 1].SenderId)
                                        {
                                            <MudText Typo="Typo.caption" Style="color: gray;">@message.Sender</MudText>
                                        }
                                    </Header>

                                <SideContent>
                                    @if (!IsFromCurrentUser(message))
                                    {
                                        <div class="message-avatar">
                                            <MudAvatar Size="Size.Small">@GetInitials(message.Sender)</MudAvatar>
                                        </div>
                                    }
                                </SideContent>

                                <Content>
                                    @message.Content
                                </Content>
    @*
                                <Overlay>
                                    ❤️
                                </Overlay>
    *@
                                <Actions>
                                        <MudMenu AnchorOrigin="Origin.BottomLeft">
                                            <ActivatorContent>
                                                <MudIconButton Style="margin-top: -5px; padding: 10px;" Icon="@Icons.Filled.MoreVert"
                                                    Variant="Variant.Text" Color="Color.Secondary" />
                                            </ActivatorContent>
                                            <ChildContent>
                                                <MudMenuItem>Delete</MudMenuItem>
                                                <MudMenuItem>Report</MudMenuItem>
                                            </ChildContent>
                                        </MudMenu>
                                </Actions>
                            </MudMessage>
                        </ItemContent>

                        <Placeholder>
                             <p>
                                Loading&hellip;
                            </p>
                        </Placeholder>
                    </Virtualize>
                </ChildContent>
            </MudChatSection>

            <div style="height: 90px"></div>

        @* <div>
            <MudText Typo="Typo.subtitle2" Class="mt-6 mb-4" Align="Align.Center">Conversation ended 11:37</MudText>
        </div> *@
    </MudItem>

    <MudItem xs="12" sm="12" md="4">

    </MudItem>
</MudGrid>

<div class="bottom d-flex flex-grow-1 gap-4">
    <div class="flex-auto d-flex" style="width: 100%">
        <MudTextField @bind-Value="text" Variant="Variant.Filled" Class="rounded-lg" Lines="1"></MudTextField>
    </div>
    <div class="flex-auto d-flex" style="width: 54px">
        <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Filled.Send" Class="mt-2" Style="border-radius: 50%; padding: 15px;" OnClick="Post" />
    </div>
</div>

@code {
    HubConnection hubConnection;

    string userId;

    List<Message> messages = new List<Message>();

    string GetInitials(string name) 
    {
        var nameParts = name.Split(" ");
        return $"{nameParts[0][0]}{nameParts[1][0]}";
    }


    bool IsFromCurrentUser(Message message) 
    {
        return message.SenderId == userId;
    }

    protected override async Task OnInitializedAsync()
    {
        userId = await CurrentUserService.GetUserId();
        try
        {
            hubConnection = new HubConnectionBuilder().WithUrl($"{NavigationManager.BaseUri}api/hubs/messages", options =>
            {
                options.AccessTokenProvider = async () =>
                {
                    var results = await AccessTokenProvider.RequestAccessToken(new AccessTokenRequestOptions()
                    {Scopes = new[]{"myapi"}});
                    if (results.TryGetToken(out var accessToken))
                    {
                        return accessToken.Value;
                    }

                    return null !;
                };
            }).WithAutomaticReconnect().Build();

            hubConnection.On<UserDto2>("UserJoined", OnUserJoined);
            hubConnection.On<MessageDto>("MessageReceived", OnMessageReceived);
            hubConnection.On<UserDto2>("UserLeft", OnUserLeft);

            hubConnection.Closed += (error) =>
            {
                if (error is not null)
                {
                    Snackbar.Add($"{error.Message}", Severity.Error);
                }

                Snackbar.Add("Connection closed");
                return Task.CompletedTask;
            };
            hubConnection.Reconnected += (error) =>
            {
                Snackbar.Add("Reconnected");
                return Task.CompletedTask;
            };
            hubConnection.Reconnecting += (error) =>
            {
                Snackbar.Add("Reconnecting");
                return Task.CompletedTask;
            };
            await hubConnection.StartAsync();
            Snackbar.Add("Connected");
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }

        await LoadItems();

        await JSRuntime.InvokeVoidAsync("helpers.scrollToBottom");
    }

    void OnUserJoined(UserDto2 dto)
    {
        Snackbar.Add($"{dto.User} has joined the conversation.");

        StateHasChanged();
    }

    void OnUserLeft(UserDto2 dto)
    {
        Snackbar.Add($"{dto.User} has left the conversation.");

        StateHasChanged();
    }

    async Task OnMessageReceived(MessageDto dto)
    {
        messages.Add(new Message() {
            Id = dto.Id!,
            Sender = dto.SentBy,
            SenderId = dto.SentById,
            Content = dto.Content!,
            DateSent = dto.DateSent
        });

        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("helpers.scrollToBottom");
    }

    async Task LoadItems()
    {
        await LoadItems(0);
    }


    async Task LoadItems(int skip)
    {
        var results = await MessagesClient.GetMessagesAsync(skip, 10, null!, null);

        foreach(var dto in results.Items)
        {
            var message = new Message() {
                Id = dto.Id,
                Sender = dto.CreatedBy.FirstName + " " + dto.CreatedBy.LastName,
                SenderId = dto.CreatedBy.Id,
                Content = dto.Text!,
                DateSent = dto.Created.DateTime
            };

            messages.Insert(0, message);
        }

        StateHasChanged();
    }

    class MessageDto
    {
        public string? Id { get; set; }

        public string SentBy { get; set; } = null!;

        public string SentById { get; set; } = null!;

        public string? Content { get; set; }

        public DateTime DateSent { get; set; }
    }

    public class UserDto2
    {
        public string User { get; set; } = null!;
        public string? UserId { get; set; }
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    async Task Post()
    {
        if(string.IsNullOrEmpty(text))
        {
            return;
        }

        await hubConnection.SendAsync("SendMessage", text);

        text = string.Empty;
    }

    string text;

    public class Section
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();

        public string? Header { get; set; }

        public List<Message> Messages { get; set; } = new List<Message>();
    }


    public class Message
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();

        public string Sender { get; set; } = null!;

        public string SenderId { get; set; } = null!;

        public string Content { get; set; } = null!;

        public DateTime? DateSent { get; set; }
    }
}